USE [DFISH_Online_Service]
GO
/****** Object:  StoredProcedure [dbo].[test1]    Script Date: 02/01/2021 14:17:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[test1]
	-- Add the parameters for the stored procedure here
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.

    -- Insert statements for procedure here
	DECLARE @XCXFromOpenId varchar(50) 
	DECLARE @CreateTime varchar(50)
	DECLARE @XCXToOpenId varchar(50)
	DECLARE @minsum varchar(50)
	DECLARE @CustomerID varchar(50)
	DECLARE @StaffID varchar(50)

	DECLARE @DATAID varchar(50)  --用来判断客服是否只有一个

	--建立临时表
	--create table #tmp (XCXFromOpenId varchar(50),CreateTime varchar(50),XCXToOpenId varchar(50),minsum varchar(50),CustomerID varchar(50),StaffID varchar(50))

	--声明一个游标mycursor,select语句中参数的个数必须要和从游标取出的变量名相同
	DECLARE mycursor CURSOR
	for
	SELECT   T_CUS_SERVER_MSG.XCXFromOpenId, MAX(T_CUS_SERVER_MSG.CreateTime) AS CreateTime, ToUser.XCXToOpenId, 
                datediff(MINUTE, DATEADD(SS, T_ESS_CHANNELSTAFF_RelationShip.CreateTime, '1970-1-1 08:00:00'), getdate()) 
                AS minsum, 
				case when datediff(MINUTE, DATEADD(SS, T_ESS_CHANNELSTAFF_RelationShip.CreateTime, '1970-1-1 08:00:00'), getdate()) >10 then  T_ESS_CHANNELSTAFF_RelationShip.CustomerID end as CustomerID,
				case when datediff(MINUTE, DATEADD(SS, T_ESS_CHANNELSTAFF_RelationShip.CreateTime, '1970-1-1 08:00:00'), getdate()) >10 then  T_ESS_CHANNELSTAFF_RelationShip.StaffID end as StaffID
	FROM      T_CUS_SERVER_MSG INNER JOIN
                T_ESS_CHANNELSTAFF ON T_CUS_SERVER_MSG.XCXFromOpenId = T_ESS_CHANNELSTAFF.XCXOPENID INNER JOIN
                T_ESS_CHANNELSTAFF_RelationShip ON 
                T_ESS_CHANNELSTAFF.FID = T_ESS_CHANNELSTAFF_RelationShip.CustomerID LEFT OUTER JOIN
                    (SELECT   XCXToOpenId
                     FROM      T_CUS_SERVER_MSG T_CUS_SERVER_MSG_1
                     GROUP BY XCXToOpenId) ToUser ON T_CUS_SERVER_MSG.XCXFromOpenId = ToUser.XCXToOpenId
	GROUP BY T_CUS_SERVER_MSG.XCXFromOpenId, ToUser.XCXToOpenId, T_ESS_CHANNELSTAFF_RelationShip.CreateTime, 
                T_ESS_CHANNELSTAFF_RelationShip.StaffID, T_ESS_CHANNELSTAFF_RelationShip.CustomerID
	HAVING   (ToUser.XCXToOpenId IS NULL)
	--打开游标
	open mycursor

	--从游标里取出数据赋值到我们刚才声明的变量中（移动游标指向到第一条数据，提取第一条数据存放在变量中）
	FETCH NEXT FROM mycursor INTO @XCXFromOpenId,@CreateTime,@XCXToOpenId,@minsum,@CustomerID,@StaffID
	--判断游标的状态
	---0 fetch语句成功
	---1 fetch语句失败或此行不在结果集中
	---2 被提取的行不存在
	WHILE (@@fetch_status = 0)
		BEGIN
			--显示出我们每次用游标取出的值
			--print(@XCXFromOpenId+'----'+@CreateTime+'----'+@XCXToOpenId+'----'+@minsum+'----'+@CustomerID+'----'+@StaffID)
			if(@minsum>10)  --如果时间大于一定时间则换客服
			begin
				SELECT   @DATAID=a_1.FID
				FROM      (SELECT   a.FID, a.KHNAME, b.PICTURE, a.XCXOPENID
                 FROM      dbo.T_ESS_CHANNELSTAFF AS a LEFT OUTER JOIN
                                 dbo.T_ESS_CHANNELSTAFF_AVATAR AS b ON a.FID = b.STAFFID LEFT OUTER JOIN
                                 dbo.T_ESS_CHANNELSTAFF_L AS c ON c.FID = a.FID LEFT OUTER JOIN
                                 dbo.A_ROLE AS d ON d.FID = c.FROLEID
                 WHERE   (d.FPERMISSIONS = 1) AND (a.XCXOPENID IN
                                     (SELECT   XCXFromOpenId
                                      FROM      dbo.T_CUS_SERVER_MSG
                                      WHERE   (MsgId >= 0)
                                      GROUP BY XCXFromOpenId))) AS a_1 LEFT OUTER JOIN
                    (SELECT   XCXFromOpenId, MAX(Id) AS id, MAX(CreateTime) AS createTime
                     FROM      dbo.T_CUS_SERVER_MSG AS T_CUS_SERVER_MSG_1
                     GROUP BY XCXFromOpenId) AS m ON m.XCXFromOpenId = a_1.XCXOPENID LEFT OUTER JOIN
                dbo.T_CUS_SERVER_MSG AS m1 ON m1.Id = m.id
				WHERE   (m1.CreateTime =
                    (SELECT   MAX(CreateTime) AS CreateTime
                     FROM      (SELECT   a_1_1.FID, m1.CreateTime
                                      FROM      (SELECT   a.FID, a.KHNAME, b.PICTURE, a.XCXOPENID
                                                       FROM      dbo.T_ESS_CHANNELSTAFF AS a LEFT OUTER JOIN
                                                                       dbo.T_ESS_CHANNELSTAFF_AVATAR AS b ON a.FID = b.STAFFID LEFT OUTER JOIN
                                                                       dbo.T_ESS_CHANNELSTAFF_L AS c ON c.FID = a.FID LEFT OUTER JOIN
                                                                       dbo.A_ROLE AS d ON d.FID = c.FROLEID
                                                       WHERE   (d.FPERMISSIONS = 1) AND (a.XCXOPENID IN
                                                                           (SELECT   XCXFromOpenId
                                                                            FROM      dbo.T_CUS_SERVER_MSG AS T_CUS_SERVER_MSG_2
                                                                            WHERE   (MsgId >= 0)
                                                                            GROUP BY XCXFromOpenId))) AS a_1_1 LEFT OUTER JOIN
                                                          (SELECT   XCXFromOpenId, MAX(Id) AS id, MAX(CreateTime) AS createTime
                                                           FROM      dbo.T_CUS_SERVER_MSG AS T_CUS_SERVER_MSG_1
                                                           GROUP BY XCXFromOpenId) AS m_1 ON 
                                                      m_1.XCXFromOpenId = a_1_1.XCXOPENID LEFT OUTER JOIN
                                                      dbo.T_CUS_SERVER_MSG AS m1 ON m1.Id = m_1.id
                                      WHERE   (a_1_1.FID <> @StaffID)) AS derivedtbl_1))
				--insert into #tmp(XCXFromOpenId,CreateTime,XCXToOpenId,minsum,CustomerID,StaffID) values(@XCXFromOpenId,@CreateTime,@XCXToOpenId,@minsum,@CustomerID,@StaffID)
				--print @DATAID
				if(@DATAID != NULL or @DATAID != '')
				begin
				UPDATE T_ESS_CHANNELSTAFF_RelationShip SET STAFFID=@DATAID,CreateTime = DATEDIFF(second, '1970-01-01 08:00:00', GETDATE())
					WHERE CustomerID = @CustomerID
				end
			end

			--用游标去取下一条记录（继续取下一行数据
			FETCH NEXT FROM mycursor INTO @XCXFromOpenId,@CreateTime,@XCXToOpenId,@minsum,@CustomerID,@StaffID
		END
	CLOSE mycursor --关闭游标
	DEALLOCATE mycursor --撤销游标（释放资源）
	--select * from #tmp  --查询临时表
	--drop table #tmp   --删除临时表
END

